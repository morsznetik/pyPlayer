name: Test, build, deploy

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'docs/**'
      - '**.md'
      - '.gitignore'
      - 'LICENSE'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - 'docs/**'
      - '**.md'
      - '.gitignore'
      - 'LICENSE'
  workflow_dispatch:
    inputs:
      build_executable:
        description: 'Build Windows executable'
        type: boolean
        default: true

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Setup Python cache
        uses: actions/cache@v4
        with:
          path: |
            .venv
            ~/.cache/uv
          key: ${{ runner.os }}-python-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-python-

      - name: Create virtual environment
        run: uv venv

      - name: Install dependencies
        run: |
          uv pip install .[dev]

      - name: Run Basedpyright
        run: |
          .venv/bin/python -m basedpyright

  test:
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        python-version: ['3.13']
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Setup Python cache
        uses: actions/cache@v4
        with:
          path: |
            .venv
            ~/.cache/uv
          key: ${{ runner.os }}-python-${{ matrix.python-version }}-test-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ matrix.python-version }}-test-

      - name: Create virtual environment
        run: uv venv

      - name: Install dependencies
        run: |
          uv pip install -e .[dev]
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Run tests
        run: |
          python -m pytest

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results-${{ matrix.python-version }}
          path: pytest-results.xml
          retention-days: 5

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Setup Python cache
        uses: actions/cache@v4
        with:
          path: |
            .venv
            ~/.cache/uv
          key: ${{ runner.os }}-python-build-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-python-build-

      - name: Create virtual environment
        run: uv venv

      - name: Install dependencies
        run: |
          uv pip install build wheel

      - name: Build package
        run: python -m build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  build-executable:
    runs-on: windows-latest
    needs: test
    if: github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Setup Python cache
        uses: actions/cache@v4
        with:
          path: |
            .venv
            ~\AppData\Local\uv\cache
          key: ${{ runner.os }}-python-exe-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-python-exe-

      - name: Create virtual environment
        run: uv venv

      - name: Install dependencies
        run: |
          uv pip install -e .
          uv pip install pyinstaller

      - name: Build executable
        run: |
          .venv\Scripts\python.exe -m PyInstaller --onefile --name pyplayer --add-data "pyplayer;pyplayer" pyplayer\__init__.py
        shell: cmd

      - name: Zip executable
        run: Compress-Archive -Path dist\pyplayer.exe,README.md -DestinationPath dist\pyplayer-windows.zip
        shell: pwsh

      - name: Upload executable
        uses: actions/upload-artifact@v4
        with:
          name: pyplayer-windows
          path: dist\pyplayer-windows.zip
